

plugins {
	id "us.kirchmeier.capsule" version "0.9.0" //  VERSION 0.10.0 of Capsule has a bug!! staying with 0.9.0
	id "com.jfrog.bintray" version "1.0"
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'c'
apply plugin: 'cpp'
apply plugin: 'idea'


[
	compileJava,
	compileTestJava
]*.options*.encoding = 'UTF-8'


//***********************************************************************************
// NATIVE CODE BUILDING

String lOsString = System.properties['os.name'].toLowerCase()
println "OS string: ${lOsString}"

// fix below using:
// http://gradle.org/docs/current/release-notes#major-changes-to-incubating-'native-component'-and-'jvm-component'-plugins
//if (lOsString.contains('wine'))
//{
//
//	ext {
//		javaHome = System.getenv('JAVA_HOME')
//		javaHomeInclude = javaHome + '/include'
//		if (System.properties['os.name'].toLowerCase().contains('linux'))
//		{
//			javaHomeIncludeOs = javaHomeInclude + '/linux'
//		}
//		else
//		{
//			javaHomeIncludeOs = javaHomeInclude + '/win32'
//		}
//	}
//
//	dependencies {
//		if (! javaHome) {
//			logger.error('JAVA_HOME is not set.')
//		}
//		println 'JAVA_HOME: ' + javaHome
//	}
//
//	model {
//		platforms { x64 { architecture "x86_64" } }
//
//		repositories {
//			libs(PrebuiltLibraries) {
//				jvm {
//					binaries.withType(SharedLibraryBinary) {
//						sharedLibraryFile = file(javaHome + "/lib/jvm.lib")
//					}
//				}
//			}
//		}
//	
//		toolChains {
//			visualCpp(VisualCpp) {
//				// Specify the installDir if Visual Studio cannot be located
//				// installDir "C:/Apps/Microsoft Visual Studio 10.0"
//			}
//		}
//	}
//
//	binaries.all {
//		if (toolChain in VisualCpp) {
//			cppCompiler.args "/EHsc"
//		}
//	}
//
//	libraries { 
//		cvlib { targetPlatforms "x64" } 
//	}
//
//	sources {
//		cvlib {
//			cpp {
//				source {
//					srcDirs "src/cpp"
//					include "**/*.cpp"
//				}
//				exportedHeaders {
//					srcDirs "src/cpp","src/cpp/lib"
//					include "**/*.h"
//				}
//			}
//		}
//	}
//
//	executables {
//		cvlib_test {
//			targetPlatforms "x64"
//			binaries.all { lib libraries.cvlib.shared  }
//		}
//	}
//
//	sources {
//		cvlib_test {
//			cpp {
//				source {
//					srcDir "src/cpp"
//					include "cvlib_test.cpp"
//				}
//				lib library: 'jvm'
//			}
//		}
//	
//	}
//}



//***********************************************************************************
// JAVA CODE BUILDING

sourceSets
{
	main
	{
		java
		{ srcDir 'src/java' }
		resources
		{  srcDir 'src/java' }
	}
	test
	{
		java
		{ srcDir 'src/java' }
		resources
		{  srcDir 'src/java' }
	}
}

javadoc { options.charSet = 'UTF-8' }

sourceCompatibility = 1.7
targetCompatibility = 1.7

test
{
	testLogging.showStandardStreams = true
	testLogging
	{ events "passed", "skipped", "failed" }

	exclude '**/demo/**'
	exclude '**/run/**'

	maxHeapSize = "4G"
}


def versionOverrides = [
	"org.jdom:jdom2": "2.0.5"
]

configurations.all
{
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	resolutionStrategy.force("org.jdom:jdom2:2.0.5")
}


dependencies
{

	compile group: 'commons-collections', name: 'commons-collections', version: '3.2.1'
	compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
	compile group: 'commons-io', name: 'commons-io', version: '2.4'
	compile group: 'org.apache.commons', name: 'commons-math3', version: '3.4.1'
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.1'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.1'

	compile 'net.sf.trove4j:trove4j:3.0.3'
	compile 'com.miglayout:miglayout:3.7.4'
	compile 'args4j:args4j:2.0.29'
	compile 'com.apple:AppleJavaExtensions:1.4'

	compile group: "net.coremem", name: "CoreMem", version: "(,1.0.0]", changing: true, transitive:true
	compile 'com.nativelibs4java:javacl:1.0.0-RC4'
	

	// usage: gradle .... -Plocal=true
	if (project.hasProperty('local')) {
		println 'Using local clearCUDA and clearGL sources'
		compile project(':cleargl')
		compile project(':clearcuda')
	}
	else {
		println 'Using clearCUDA and clearGL from Maven repository'/**/
		compile group: "net.clearvolume", name: "cleargl", version: "(,1.0]", changing: true, transitive: true
		compile group: "net.clearvolume", name: "clearcuda", version: "(,1.0]", changing: true, transitive: true
	}

	compile group: 'junit', name: 'junit', version: '4.12'
	testCompile group: 'junit', name: 'junit', version: '4.12'

}

repositories
{
	mavenCentral()
	maven
	{ url  "http://dl.bintray.com/clearvolume/ClearVolume"  }
	maven
	{ url  "http://dl.bintray.com/royerloic/maven" }
	maven
	{ url "http://oss.sonatype.org/content/groups/public" }
	maven { url  "http://dl.bintray.com/rtlib/CoreMem" }

}



/*jar {
 def classpath  = configurations.compile.collect { it.directory&&{println it; true} ? it : zipTree(it) } 
 from(classpath)
 manifest {
 attributes("Class-Path": ".", 'Main-Class': 'clearvolume.main.ClearVolumeMain')
 }
 }/**/

task cvFatJar(type:Jar) {
	archiveName = "ClearVolume.fat.jar"
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

	manifest {
		attributes("Class-Path": ".", 'Main-Class': 'clearvolume.main.ClearVolumeMain')
	}
}


task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}




//***********************************************************************************
// FAT CAPSULE TASKS

task fatCapsule(type: FatCapsule) {
	applicationClass 'clearvolume.main.ClearVolumeMain'
	reallyExecutable
}


task copyCapsule{
	doLast {
		copy{
			from('./build/libs/')
			into('./build/executable')
			include('*-capsule.jar')
			rename('.+-capsule.jar','ClearVolume.exe.jar')
		}
	}
}

copyCapsule.dependsOn build


//***********************************************************************************
// CVLIB PACKAGING TASKS

task packagecvlib {

	def os = System.getProperty("os.name").toLowerCase()
	if (os.contains("win"))
	{
		copy
		{
			from('./build/binaries/cvlibSharedLibrary/')
			into('./build/cvlib/')
			include('cvlib.dll')
		}

		copy
		{
			from('./src/cpp/')
			into('./build/cvlib/')
			include('cvlib.h','cvlib_test.cpp')
		}

		copy
		{
			from('./build/binaries/cvlib_testExecutable/')
			into('./build/cvlib/')
			include('cvlib_test.exe')
		}

		copy
		{
			from('./build/libs/')
			into('./build/cvlib/')
			include('ClearVolume.fat.jar')
			rename('ClearVolume.fat.jar','ClearVolume.jar')
		}
	}

}

task packagelvcvlib {

	def os = System.getProperty("os.name").toLowerCase()
	if (os.contains("win"))
	{
		copy
		{
			from('./src/labview/')
			into('./build/labview/')
			include('*')
		}

		copy
		{
			from('./src/labview/lvcvlib')
			into('./build/labview/lvcvlib/')
			include('*')
		}

		copy
		{
			from('./src/labview/lvcvlib/VIs')
			into('./build/labview/lvcvlib/VIs')
			include('*')
		}

		copy
		{
			from('./build/binaries/cvlibSharedLibrary/')
			into('./build/labview/lvcvlib/')
			include('cvlib.dll')
		}

		copy
		{
			from('./build/libs/')
			into('./build/labview/')
			include('ClearVolume.fat.jar')
			rename('ClearVolume.fat.jar','ClearVolume.jar')
		}

	}
}

//***********************************************************************************
// OSX APP PACKAGING TASKS

task packageosxapp {

	def os = System.getProperty("os.name").toLowerCase()
	if (os.contains("mac"))
	{
		copy
		{
			from('./deploy/osx/ClearVolume.app/')
			into('./build/executable/ClearVolume.app/')
			include "*.*"
			include '**/**'
			include '**/**/**'
			include '**/**/**/**/'
			include '**/**/**/**/**/'
			include '**/**/**/**/**/**/'
			include '**/**/**/**/**/**/**/'
			include '**/**/**/**/**/**/**/**/'
		}

		def javahome = System.getenv('JAVA_HOME')

		copy
		{
			from(javahome+'/jre/')
			into('./build/executable/ClearVolume.app/Contents/Resources/jre')
			include "*.*"
			include '**/**'
			include '**/**/**'
			include '**/**/**/**/'
			include '**/**/**/**/**/'
			include '**/**/**/**/**/**/'
			include '**/**/**/**/**/**/**/'
			include '**/**/**/**/**/**/**/**/'
			exclude 'libjfxwebkit.dylib'
			exclude 'jfxrt.jar'
		}

		copy
		{
			from('./build/executable/')
			into('./build/executable/ClearVolume.app/Contents/Resources')
			include('ClearVolume.exe.jar')
		}
	}
}

packageosxapp.dependsOn copyCapsule


//***********************************************************************************
// WIN EXE  TASKS

task packagewinapp(type:Exec) {

	def os = System.getProperty("os.name").toLowerCase()
	if (os.contains("win"))
	{

		def userhome = System.getenv('HOME')

		copy
		{
			from(userhome+'/.winjre/')
			into('./build/executable/ClearVolumeWin/jre')
			include "*.*"
			include '**/**'
			include '**/**/**'
			include '**/**/**/**/'
			include '**/**/**/**/**/'
			include '**/**/**/**/**/**/'
			include '**/**/**/**/**/**/**/'
			include '**/**/**/**/**/**/**/**/'
			exclude 'libjfxwebkit.dll'
			exclude 'jfxrt.jar'
		}

		copy
		{
			from('./deploy/win/libs/')
			into('./build/executable/ClearVolumeWin/dlls/')
			include "*.dll"
		}

		workingDir '.'
		commandLine './packagewinapp.sh'

		standardOutput = new ByteArrayOutputStream()

		ext.output = {return standardOutput.toString()}
	}
}

packagewinapp.dependsOn copyCapsule

//***********************************************************************************
// DISTRIBUTION PACKAGING TASKS

task collectdistribution(dependsOn:[packageosxapp, packagewinapp]) {

	copy
	{
		from('./build/executable/')
		into('./build/distribution/')
		include "*.*"
		include '**/**'
		include '**/**/**'
		include '**/**/**/**/'
		include '**/**/**/**/**/'
		include '**/**/**/**/**/**/'
		include '**/**/**/**/**/**/**/'
		include '**/**/**/**/**/**/**/**/'
	}

	copy
	{
		from('./build/libs/')
		into('./build/distribution/javalibs')
		include "*.*"
		include '**/**'
	}
}


task packagedmg(type:Exec,dependsOn:collectdistribution ) {

	def os = System.getProperty("os.name").toLowerCase()
	if (os.contains("nix") || os.contains("mac"))
	{
		workingDir '.'
		commandLine './packagedmg.sh'
		standardOutput = new ByteArrayOutputStream()
		ext.output = {return standardOutput.toString()}
	}
}


task packagezip(type:Exec,dependsOn:collectdistribution) {

	def os = System.getProperty("os.name").toLowerCase()
	if (os.contains("nix") || os.contains("mac"))
	{
		workingDir '.'
		commandLine './packagezip.sh'
		standardOutput = new ByteArrayOutputStream()
		ext.output = {return standardOutput.toString()}
	}
}


task copyRuntimeLibs(type: Copy) {
	into "./build/lib/dep"
	from configurations.runtime
}


//***********************************************************************************
// PUBLISHING


group = 'net.clearvolume'
version = '0.9.4'

artifacts
{
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourcesJar { classifier "sources" }
		}
	}
}

if(hasProperty('bintray_user') && hasProperty('bintray_key') )
{
	bintray {

		// property must be set in ~/.gradle/gradle.properties
		user = bintray_user
		key =  bintray_key

		publications = [
			'maven'] //When uploading configuration files
		dryRun = false //Whether to run this as dry-run, without deploying
		publish = true //If version should be auto published after an upload
		pkg {
			repo = 'ClearVolume'
			userOrg = 'clearvolume' //An optional organization name when the repo belongs to one of the user's orgs
			name = 'ClearVolume'
			desc = 'ClearVolume'
			websiteUrl = 'https://clearvolume.github.io/ClearVolume/'
			issueTrackerUrl = 'https://github.com/ClearVolume/ClearVolume/issues'
			vcsUrl = 'https://github.com/ClearVolume/ClearVolume.git'
			//licenses = ['Apache-2.0']
			labels = [
				'ClearVolume',
				'Visualization',
				'3D',
				'Microscopy',
				'Real-time'
			]
			publicDownloadNumbers = true
			//attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
			//Optional version descriptor
			version {
				name = project.version //Bintray logical version name
				desc = '.'
				released  = new java.util.Date()
				vcsTag = project.version
				/*attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
				 gpg {
				 sign = false //Determines whether to GPG sign the files. The default is false
				 passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
				 }
				 mavenCentralSync {
				 sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
				 user = 'userToken' //OSS user token
				 password = 'paasword' //OSS user password
				 close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
				 }  /**/          
			}
		}
	}
	/**/
}



